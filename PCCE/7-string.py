# 문자열은 불변형-수정 불가-임
# 작은 따옴표(') 또는 큰 타옴표(")로 둘러 싸여 있다.
# 문자열은 파이썬에 다양한 기능이 구현되어 있다. 

# 문자열 생성
x = '"문자열" 생성하기' # 작은따옴표 내 큰따옴표 사용 가능
print(x)
x = "'문자열' 생성하기" # 큰따옴표 내 작은따옴표 사용 가능
print(x)
x = '\'문자열\' 생성하기' # 작은따옴표 내 작은따옴표 쓰려면 \ 사용(이스케이프 문자)
print(x)
x = '''문자열
열러줄로
만들기
가능''' # 작은따옴표나 큰따옴표를 3개 연달아 쓰면 여러 줄로 문자열 사용 가능
print(x)

# 문자열 접근
x = 'This is a string'
print(f'x[3] = {x[3]}') # 문자열도 인덱싱 사용 가능

print(f'type(x[3]) = {type(x[3])}') # 인덱싱으로 뽑아낸 그것도 역시 문자열이다.
# python의 경우 char(character) 자료형이 없고 str로 통일
# 인덱싱이 된다면 슬라이싱도 가능
print(f'x[:5] = {x[:5]}') 
print(f'x[::2] = {x[::2]}') # 다양한 슬라이싱 가능

# x[2] = 'a' 수정 안됨
# del x[2] 삭제 안됨, 추가도 안됨

# 튜플처럼 문자열 이어붙이기는 가능
x = x + 'abc' 
print(f'x = {x}')

# 문자열 이어붙이기(concatenation) 
a = 'abc'
b = 'def'
print(f'a + b = {a + b}') # 두 문자열 이어 붙이기
print(f'b + a = {b + a}') # 순서가 관계가 있다
print(f'a * 3 = a + a + a = {a * 3}') # 문자열을 *로 반복해서 이어붙일 수 있다
print(f'a * -4 = {a * (-4)}') # 반복이 안되는 경우 빈 문자열 반환
# print(f'a * 2.5 = {a * 2.5}') # 반복 횟수는 정수만 가능

# 문자열 이어붙이기(join)
x = ['사과', '배', '감', '바나나']
print(f'x = {x}')
y = ''.join(x) # 빈 문자열('')을 사이에 넣어서 리스트에 있는 모든 문자열 연결
print(f'y = {y}')
y = ', '.join(x) # 문자열(', ')을 사이에 넣어서 리스트에 있는 모든 문자열 연결
print(f'y = {y}')

# 문자열 분리하기
x = '콤마로,구분되어,있는,문자열,입니다.'
print(f'x = {x}')
y = x.split(',')
print(f'y = {y}')

x = '공백으로 구분되어 있는 문자열 입니다.'
print(f'x = {x}')
y = x.split(' ')
print(f'y = {y}')

x = '공백,또는 콤마로,구분된 문자열,입니다.'
print(f'x = {x}')
y = x.replace(',', ' ').split(' ') # replace로 콤마를 공백으로 변경 후 split
print(f'y = {y}')






