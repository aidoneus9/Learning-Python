# 문자열은 불변형-수정 불가-임
# 작은 따옴표(') 또는 큰 타옴표(")로 둘러 싸여 있다.
# 문자열은 파이썬에 다양한 기능이 구현되어 있다. 

# 문자열 생성
x = '"문자열" 생성하기' # 작은따옴표 내 큰따옴표 사용 가능
print(x)
x = "'문자열' 생성하기" # 큰따옴표 내 작은따옴표 사용 가능
print(x)
x = '\'문자열\' 생성하기' # 작은따옴표 내 작은따옴표 쓰려면 \ 사용(이스케이프 문자)
print(x)
x = '''문자열
열러줄로
만들기
가능''' # 작은따옴표나 큰따옴표를 3개 연달아 쓰면 여러 줄로 문자열 사용 가능
print(x)

# 문자열 접근
x = 'This is a string'
print(f'x[3] = {x[3]}') # 문자열도 인덱싱 사용 가능

print(f'type(x[3]) = {type(x[3])}') # 인덱싱으로 뽑아낸 그것도 역시 문자열이다.
# python의 경우 char(character) 자료형이 없고 str로 통일
# 인덱싱이 된다면 슬라이싱도 가능
print(f'x[:5] = {x[:5]}') 
print(f'x[::2] = {x[::2]}') # 다양한 슬라이싱 가능

# x[2] = 'a' 수정 안됨
# del x[2] 삭제 안됨, 추가도 안됨

# 튜플처럼 문자열 이어붙이기는 가능
x = x + 'abc' 
print(f'x = {x}')

# 문자열 이어붙이기(concatenation) 
a = 'abc'
b = 'def'
print(f'a + b = {a + b}') # 두 문자열 이어 붙이기
print(f'b + a = {b + a}') # 순서가 관계가 있다
print(f'a * 3 = a + a + a = {a * 3}') # 문자열을 *로 반복해서 이어붙일 수 있다
print(f'a * -4 = {a * (-4)}') # 반복이 안되는 경우 빈 문자열 반환
# print(f'a * 2.5 = {a * 2.5}') # 반복 횟수는 정수만 가능

# 문자열 이어붙이기(join)
x = ['사과', '배', '감', '바나나']
print(f'x = {x}')
y = ''.join(x) # 빈 문자열('')을 사이에 넣어서 리스트에 있는 모든 문자열 연결
print(f'y = {y}')
y = ', '.join(x) # 문자열(', ')을 사이에 넣어서 리스트에 있는 모든 문자열 연결
print(f'y = {y}')

# 문자열 분리하기
x = '콤마로,구분되어,있는,문자열,입니다.'
print(f'x = {x}')
y = x.split(',')
print(f'y = {y}')

x = '공백으로 구분되어 있는 문자열 입니다.'
print(f'x = {x}')
y = x.split(' ')
print(f'y = {y}')

x = '공백,또는 콤마로,구분된 문자열,입니다.'
print(f'x = {x}')
y = x.replace(',', ' ').split(' ') # replace로 콤마를 공백으로 변경 후 split
print(f'y = {y}')

# 문자열 포매팅 - 방법1 - 전통적인 출력 방법(C언어부터 사용)
print('%d' % 154) # 문자열에 %d(decimal; 십진수)를 사용하면, 어떤 숫자를 십진수로 표현해라
print('%d는 %d보다 크다.' % (35, 10))

x = 35
y = 10
print('%d와 %d를 가지고 있다.' % (x, y))    

print('%f' % 3.141592) # %f(float number; 부동소수점 실수)는 실수값으로 표현해라
print('%f' % 100) # 정수 값을 넘겨도 실수로 출력한다. 
print('%d' % 3.141592) # 실수 값을 넘겨도 정수로 출력한다. 
print('%.3f' % 3.141592) # 소수점 뒤에 3자리만 표기  
print('%10.3f' % 3.141592) # 숫자 전체가 10칸을 차지하고, 오른쪽 정렬 
print('%-10.3f' % 3.141592) # 숫자 전체가 10칸을 차지하고, 왼쪽 정렬 
print('%10d' % 100) # 숫자 전체가 10칸을 차지하고, 오른쪽 정렬 
print('%s %s %s' % ('문자열도', '안에', '넣을 수 있다'))
print('%10s %s %s' % ('문자열도', '안에', '넣을 수 있다'))
print('%1d' % 1234) # 칸이 모자라면 넘어설 수도 있다. 내용은 전부 출력된다. 

# 문자열 포매팅 방법2 - format()을 이용한 포매팅
print('{} is a number'.format(3.14))
print('{} {} {} {}'.format(10, 20, 30, 'are numbers.'))
print('{a} {b} {c} {a}'.format(a=10, b=30, c=50))
# 어떻게 쓰이는가? 템플릿을 만들어 놓을 수 있다.
s = '''당신의 이름은 {full_name}입니다.
당신은 {short_name}으로도 불립니다.
하지만 당신의 진짜 이름은 {full_name}입니다.
'''
print(s.format(full_name='이동경', short_name='동경'))

# 문자열 포매팅 방법3 - f-string을 이용한 방법 
print(f'x = {1}') # {}안에 어떤 표현이라도 넣을 수 있다. 
print(f'x = {1 + 2}')
x = 1+2
print(f'x = {x}')
x = '                앞뒤로 공백이 있는 문자열                 '
print(f'문자열:{x.strip()}') # strip(): 앞뒤 공백을 제거해 주는 메소드




















